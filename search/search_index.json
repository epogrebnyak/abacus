{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#minimal-yet-valid-double-entry-accounting-system-in-python-and-command-line","title":"Minimal yet valid double-entry accounting system in Python and command line","text":"<p><code>abacus</code> is an Python package and a command line tool for accounting calculations. There is also a web interface demonstration.</p> <p>With <code>abacus</code> you can perform a complete accounting cycle from a chart of accounts to financial reports. To start using <code>abacus</code> go to Quick Start section.</p> <p>Few lines of sample code for a fictitious Dunder Mufflin paper company are listed below together with <code>abacus</code> outputs.</p> PythonCommand lineTrial balanceBalance sheetIncome statementInstall <pre><code>from abacus import Chart, Account, Report\n\n# Define chart\nchart = Chart(\n    assets=[\"cash\", \"paper\"],\n    capital=[\"equity\"],\n    income=[Account(\"sales\", contra_accounts=[\"refunds\"])],\n    expenses=[\"cogs\", \"salaries\"],\n)\n\n# Use account balances form previous period\nstarting_balances = {\"cash\": 300, \"paper\": 2200, \"equity\": 2500}\nledger = chart.ledger(starting_balances)\n\n# Post enties\nledger.post(\"cash\", \"sales\", 2675, title=\"Sell paper for cash\")\nledger.post(\"refunds\", \"cash\", 375, title=\"Client refund\")\nledger.post(\"cogs\", \"paper\", 2000, title=\"Register cost of sales\")\nledger.post(\"salaries\", \"cash\", 500, title=\"Pay salaries\")\n\n# Show reports\nrename_dict = {\"cogs\": \"Cost of goods sold\", \"paper\": \"Inventory\"}\nreport = Report(chart, ledger, rename_dict)\nreport.print_all()\n</code></pre> <pre><code>bx ledger unlink --yes\nbx init\nbx chart add asset:cash\nbx chart add asset:paper --title \"Inventory\"\nbx chart add capital:equity\nbx chart add income:sales contra:sales:refunds\nbx chart add expense:cogs --title \"Cost of goods sold\"\nbx chart add expense:salaries\necho {\\\"cash\\\": 300, \\\"paper\\\": 2200, \\\"equity\\\": 2500} &gt; starting_balances.json\nbx ledger load starting_balances.json\nbx post --entry cash     sales 2675 --title=\"Sell paper for cash\"\nbx post --entry refunds  cash   375 --title=\"Client refund\"\nbx post --entry cogs     paper 2000 --title=\"Register cost of sales\"\nbx post --entry salaries cash   500 --title=\"Pay salaries\"\nbx close\nbx report --all\n</code></pre> <pre><code>            Trial balance\nAccount                   Debit   Credit\ncash                       2100        0\npaper                       200        0\nrefunds                     375        0\ncogs                       2000        0\nsalaries                    500        0\nequity                        0     2500\nretained_earnings             0        0\nsales                         0     2675\n_isa                          0        0\n_null                         0        0\n</code></pre> <pre><code>            Balance sheet\nAssets       2300   Capital          2300\n  Cash       2100     Equity         2500\n  Inventory   200     Retained       -200\n                      earnings\n                    Liabilities         0\nTotal        2300  Total             2300\n</code></pre> <pre><code>            Income Statement\nIncome                              2300\n  Sales                             2300\nExpenses                            2500\n  Cost of goods sold                2000\n  Salaries                           500\nCurrent profit                      -200\n</code></pre> <pre><code>pip install abacus-py\n</code></pre> <p>Quick Start</p>"},{"location":"quick_start/","title":"Quick start","text":""},{"location":"quick_start/#install","title":"Install","text":"<p><code>abacus</code> requires Python 3.10 or higher. To install run in the command line:</p> <pre><code>pip install abacus-py\n</code></pre>"},{"location":"quick_start/#accounting-cycle-with-abacus","title":"Accounting cycle with <code>abacus</code>","text":"<p>With <code>abacus</code> you can replicate the following parts of accounting work:</p> <ul> <li> define a chart of accounts,</li> <li> post entries to ledger,</li> <li> make trial balance and adjustment entries,</li> <li> close accounts at period end,</li> <li> make balance sheet and income statement.</li> </ul>"},{"location":"quick_start/#minimal-example","title":"Minimal example","text":"<p>A trading firm started with $5000 investment from shareholders, bought $4000 worth of merchandise and sold it for $4800, also paid $500 to the firm sales representative. Show firm balance sheet and income statement at period end.</p>"},{"location":"quick_start/#define-chart-of-accounts","title":"Define chart of accounts","text":"PythonCommand line <pre><code>from abacus import Chart\n\nchart = Chart(\n    assets=[\"cash\", \"inv\"],\n    capital=[\"equity\"],\n    income=[\"sales\"],\n    expenses=[\"cogs\", \"sga\"],\n    retained_earnings_account=\"retained_earnings\"\n)\n</code></pre> <pre><code>bx init\nbx chart add --asset cash\nbx chart add --asset inv --title \"Inventory\"\nbx chart add --capital equity\nbx chart add --income sales\nbx chart add --expense cogs --title \"Cost of goods sold\"\nbx chart add --expense sga --title \"Selling expenses\"\n</code></pre>"},{"location":"quick_start/#use-ledger-to-post-entries","title":"Use ledger to post entries","text":"PythonCommand line <pre><code>ledger = chart.ledger()\nledger.post(debit=\"cash\", credit=\"equity\", amount=5000, title=\"Shareholder investment\")\nledger.post(\"inv\",  \"cash\",   4000, title=\"Purchased merchandise\")\nledger.post(\"cash\", \"sales\",  4800, title=\"Sold merchandise\")\nledger.post(\"cogs\", \"inv\",    4000, title=\"Registered cost of sales\")\nledger.post(\"sga\",  \"cash\",    500, title=\"Paid sales representative\")\n</code></pre> <pre><code>bx post --entry cash equity 5000 --title \"Shareholder investment\"\nbx post --entry  inv   cash 4000 --title \"Purchased merchandise\"\nbx post --entry cash  sales 4800 --title \"Sold merchandise\"\nbx post --entry cogs    inv 4000 --title \"Registered cost of sales\"\nbx post --entry  sga   cash  500 --title \"Paid sales representative\"\nbx close\n</code></pre>"},{"location":"quick_start/#make-reports","title":"Make reports","text":"PythonCommand line <pre><code>from abacus import Report\nreport = Report(chart, ledger)\nreport.trial_balance.viewer.print()\nreport.balance_sheet.viewer.print()\nreport.income_statement.viewer.print()\nprint(report.account_balances)\n</code></pre> <pre><code>bx report --balance-sheet\nbx report --income-statement\n</code></pre>"},{"location":"quick_start/#more-features","title":"More features","text":""},{"location":"quick_start/#contra-accounts","title":"Contra accounts","text":"<pre><code>bx chart add contra:sales:refunds\nbx chart offset sales voids\nbx post --entry refunds cash 120 --title \"Client refund\"\n</code></pre>"},{"location":"quick_start/#trial-balance","title":"Trial balance","text":"<pre><code>bx report --trial-balance\n</code></pre>"},{"location":"quick_start/#account-balances","title":"Account balances","text":"<pre><code>bx show balances\nbx show balances --nonzero &gt; balances.json\n</code></pre> <p>In your next project you can do <code>bx ledger load balances.json</code>.</p>"},{"location":"quick_start/#help-with-abacus","title":"Help with <code>abacus</code>","text":"<pre><code>bx --help\n</code></pre>"},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#abacus.core","title":"<code>abacus.core</code>","text":"<p>Core elements of a minimal double-entry accounting system.</p> <p>Using this module you can:</p> <ul> <li>create a chart of accounts using <code>Chart</code> class,</li> <li>create <code>Ledger</code> from <code>Chart</code>,</li> <li>post entries to <code>Ledger</code>,</li> <li>generate trial balance, balance sheet and income statement.</li> </ul> <p>Implemented in this module:</p> <ul> <li>contra accounts \u2014 there can be a <code>refunds</code> account that offsets <code>income:sales</code>   and <code>depreciation</code> account that offsets <code>asset:ppe</code>,</li> <li>multiple entries \u2014 debit and credit several accounts in one transaction,</li> <li>closing entries \u2014 proper closing of accounts at the accounting period end.</li> </ul> <p>Assumptions and simplifications:</p> <ol> <li>no sub-accounts \u2014 there is only one level of account hierarchy in chart</li> <li>account names must be globally unique</li> <li>no cashflow statement</li> <li>one currency</li> <li>no checks for account non-negativity</li> </ol>"},{"location":"reference/#defining-a-chart","title":"Defining a chart","text":""},{"location":"reference/#abacus.Chart","title":"<code>abacus.Chart</code>  <code>dataclass</code>","text":"<p>Chart of accounts.</p> <p>Example:</p> <pre><code>chart = Chart(assets=[\"cash\"], capital=[\"equity\"])\n</code></pre> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass Chart:\n    \"\"\"Chart of accounts.\n\n    Example:\n\n    ```python\n    chart = Chart(assets=[\"cash\"], capital=[\"equity\"])\n    ```\n    \"\"\"\n\n    income_summary_account: str = \"_isa\"\n    retained_earnings_account: str = \"retained_earnings\"\n    null_account: str = \"_null\"\n    assets: list[str | Account] = field(default_factory=list)\n    capital: list[str | Account] = field(default_factory=list)\n    liabilities: list[str | Account] = field(default_factory=list)\n    income: list[str | Account] = field(default_factory=list)\n    expenses: list[str | Account] = field(default_factory=list)\n\n    def __post_init__(self):\n        self.validate()\n\n    def validate(self) -&gt; \"Chart\":\n        a = list(self.to_dict().keys())\n        b = [x[0] for x in self.dict_items()]\n        if len(a) != len(b):\n            raise AbacusError(\n                [\n                    \"Chart should not contain duplicate account names.\",\n                    len(a),\n                    len(b),\n                    set(b) - set(a),\n                ]\n            )\n        return self\n\n    def to_dict(self) -&gt; dict[str, Holder]:\n        \"\"\"Return a dictionary of account names and account types.\n        Will purge duplicate names if found in chart.\n        \"\"\"\n        return dict(self.dict_items())\n\n    def dict_items(self):\n        \"\"\"Assign account types to account names.\"\"\"\n        yield from self.stream(self.assets, T.Asset)\n        yield from self.stream(self.capital, T.Capital)\n        yield self.retained_earnings_account, Regular(T.Capital)\n        yield from self.stream(self.liabilities, T.Liability)\n        yield from self.stream(self.income, T.Income)\n        yield from self.stream(self.expenses, T.Expense)\n        yield self.income_summary_account, Wrap(IncomeSummaryAccount)\n        yield self.null_account, Wrap(NullAccount)\n\n    def pure_accounts(self, xs: list[str | Account]) -&gt; list[Account]:\n        return [Account.from_string(x) for x in xs]\n\n    def stream(self, items, t: T):\n        for account in self.pure_accounts(items):\n            yield account.name, Regular(t)\n            for contra_name in account.contra_accounts:\n                yield contra_name, Contra(t)\n\n    def ledger(self, starting_balances: dict | None = None):\n        return Ledger.new(self, AccountBalances(starting_balances))\n</code></pre>"},{"location":"reference/#abacus.core.Account","title":"<code>abacus.core.Account</code>  <code>dataclass</code>","text":"Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass Account:\n    name: str\n    contra_accounts: list[str] = field(default_factory=list)\n\n    @staticmethod\n    def from_string(s) -&gt; \"Account\":\n        if isinstance(s, str):\n            return Account(s, [])\n        return s\n\n    def __str__(self):\n        return self.name\n</code></pre>"},{"location":"reference/#entries","title":"Entries","text":""},{"location":"reference/#abacus.core.Entry","title":"<code>abacus.core.Entry</code>  <code>dataclass</code>","text":"<p>Double entry with account name to be debited,    account name to be credited and transaction amount.</p> <p>Example:</p> <pre><code>entry = Entry(debit=\"cash\", credit=\"equity\", amount=20000)\n</code></pre> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass Entry:\n    \"\"\"Double entry with account name to be debited,\n       account name to be credited and transaction amount.\n\n    Example:\n\n    ```python\n    entry = Entry(debit=\"cash\", credit=\"equity\", amount=20000)\n    ```\n    \"\"\"\n\n    debit: str\n    credit: str\n    amount: Amount\n\n    def to_json(self):\n        return json.dumps(self.__dict__)\n\n    @classmethod\n    def from_string(cls, line: str):\n        return cls(**json.loads(line))\n</code></pre>"},{"location":"reference/#abacus.core.CompoundEntry","title":"<code>abacus.core.CompoundEntry</code>  <code>dataclass</code>","text":"<p>An entry that affects several accounts at once.</p> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass CompoundEntry:\n    \"\"\"An entry that affects several accounts at once.\"\"\"\n\n    debits: list[tuple[str, Amount]]\n    credits: list[tuple[str, Amount]]\n\n    def __post_init__(self):\n        self.validate()\n\n    def validate(self):\n        \"\"\"Assert sum of debit entries equals sum of credit entries.\"\"\"\n        if sum_second(self.debits) == sum_second(self.credits):\n            return self\n        else:\n            raise AbacusError([\"Invalid multiple entry\", self])\n\n    def to_entries(self, null_account_name: str) -&gt; list[Entry]:\n        \"\"\"Return list of double entries that make up multiple entry.\n        The double entries will correspond to null account.\n        \"\"\"\n        a = [\n            Entry(account_name, null_account_name, amount)\n            for (account_name, amount) in self.debits\n        ]\n        b = [\n            Entry(null_account_name, account_name, amount)\n            for (account_name, amount) in self.credits\n        ]\n        return a + b\n\n    @classmethod\n    def from_balances(cls, chart: Chart, balances: AccountBalances) -&gt; \"CompoundEntry\":\n        ledger = chart.ledger()\n\n        def is_debit(name):\n            return isinstance(ledger.data[name], DebitAccount)\n\n        def is_credit(name):\n            return isinstance(ledger.data[name], CreditAccount)\n\n        return cls(\n            debits=[(name, b) for name, b in balances.items() if is_debit(name)],\n            credits=[(name, b) for name, b in balances.items() if is_credit(name)],\n        )\n</code></pre>"},{"location":"reference/#abacus.core.CompoundEntry.to_entries","title":"<code>to_entries(null_account_name)</code>","text":"<p>Return list of double entries that make up multiple entry. The double entries will correspond to null account.</p> Source code in <code>abacus/core.py</code> <pre><code>def to_entries(self, null_account_name: str) -&gt; list[Entry]:\n    \"\"\"Return list of double entries that make up multiple entry.\n    The double entries will correspond to null account.\n    \"\"\"\n    a = [\n        Entry(account_name, null_account_name, amount)\n        for (account_name, amount) in self.debits\n    ]\n    b = [\n        Entry(null_account_name, account_name, amount)\n        for (account_name, amount) in self.credits\n    ]\n    return a + b\n</code></pre>"},{"location":"reference/#abacus.core.CompoundEntry.validate","title":"<code>validate()</code>","text":"<p>Assert sum of debit entries equals sum of credit entries.</p> Source code in <code>abacus/core.py</code> <pre><code>def validate(self):\n    \"\"\"Assert sum of debit entries equals sum of credit entries.\"\"\"\n    if sum_second(self.debits) == sum_second(self.credits):\n        return self\n    else:\n        raise AbacusError([\"Invalid multiple entry\", self])\n</code></pre>"},{"location":"reference/#processing-entries","title":"Processing entries","text":""},{"location":"reference/#abacus.core.TAccount","title":"<code>abacus.core.TAccount</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>T-account will hold amounts on debits and credit side.</p> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass TAccount(ABC):\n    \"\"\"T-account will hold amounts on debits and credit side.\"\"\"\n\n    debits: list[Amount] = field(default_factory=list)\n    credits: list[Amount] = field(default_factory=list)\n\n    def debit(self, amount: Amount):\n        \"\"\"Add debit amount to account.\"\"\"\n        self.debits.append(amount)\n\n    def credit(self, amount: Amount):\n        \"\"\"Add credit amount to account.\"\"\"\n        self.credits.append(amount)\n\n    @abstractmethod\n    def balance(self) -&gt; Amount:\n        \"\"\"Return account balance.\"\"\"\n\n    @abstractmethod\n    def transfer_balance(self, my_name: str, dest_name: str) -&gt; \"Entry\":\n        \"\"\"Create an entry that transfers account balance from this account\n        to destination account.\n\n        This account name is `my_name` and destination account name is `dest_name`.\n        \"\"\"\n\n    def condense(self):\n        \"\"\"Create a new account of the same type with only one value as account balance.\"\"\"\n        return self.empty().topup(self.balance())\n\n    def empty(self):\n        \"\"\"Create a new empty account of the same type.\"\"\"\n        return self.__class__()\n\n    def topup(self, balance):\n        \"\"\"Add starting balance to a proper side of account.\"\"\"\n        match self:\n            case DebitAccount(_, _):\n                self.debit(balance)\n            case CreditAccount(_, _):\n                self.credit(balance)\n        return self\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.balance","title":"<code>balance()</code>  <code>abstractmethod</code>","text":"<p>Return account balance.</p> Source code in <code>abacus/core.py</code> <pre><code>@abstractmethod\ndef balance(self) -&gt; Amount:\n    \"\"\"Return account balance.\"\"\"\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.condense","title":"<code>condense()</code>","text":"<p>Create a new account of the same type with only one value as account balance.</p> Source code in <code>abacus/core.py</code> <pre><code>def condense(self):\n    \"\"\"Create a new account of the same type with only one value as account balance.\"\"\"\n    return self.empty().topup(self.balance())\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.credit","title":"<code>credit(amount)</code>","text":"<p>Add credit amount to account.</p> Source code in <code>abacus/core.py</code> <pre><code>def credit(self, amount: Amount):\n    \"\"\"Add credit amount to account.\"\"\"\n    self.credits.append(amount)\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.debit","title":"<code>debit(amount)</code>","text":"<p>Add debit amount to account.</p> Source code in <code>abacus/core.py</code> <pre><code>def debit(self, amount: Amount):\n    \"\"\"Add debit amount to account.\"\"\"\n    self.debits.append(amount)\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.empty","title":"<code>empty()</code>","text":"<p>Create a new empty account of the same type.</p> Source code in <code>abacus/core.py</code> <pre><code>def empty(self):\n    \"\"\"Create a new empty account of the same type.\"\"\"\n    return self.__class__()\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.topup","title":"<code>topup(balance)</code>","text":"<p>Add starting balance to a proper side of account.</p> Source code in <code>abacus/core.py</code> <pre><code>def topup(self, balance):\n    \"\"\"Add starting balance to a proper side of account.\"\"\"\n    match self:\n        case DebitAccount(_, _):\n            self.debit(balance)\n        case CreditAccount(_, _):\n            self.credit(balance)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.TAccount.transfer_balance","title":"<code>transfer_balance(my_name, dest_name)</code>  <code>abstractmethod</code>","text":"<p>Create an entry that transfers account balance from this account to destination account.</p> <p>This account name is <code>my_name</code> and destination account name is <code>dest_name</code>.</p> Source code in <code>abacus/core.py</code> <pre><code>@abstractmethod\ndef transfer_balance(self, my_name: str, dest_name: str) -&gt; \"Entry\":\n    \"\"\"Create an entry that transfers account balance from this account\n    to destination account.\n\n    This account name is `my_name` and destination account name is `dest_name`.\n    \"\"\"\n</code></pre>"},{"location":"reference/#abacus.core.Ledger","title":"<code>abacus.core.Ledger</code>","text":"<p>               Bases: <code>UserDict[str, TAccount]</code></p> Source code in <code>abacus/core.py</code> <pre><code>class Ledger(UserDict[str, TAccount]):\n    @classmethod\n    def new(cls, chart: Chart, balances: AccountBalances | None):\n        \"\"\"Create a new ledger from chart, possibly using starting balances.\"\"\"\n        ledger = cls({name: h.t_account() for name, h in chart.dict_items()})  # type: ignore\n        if balances:\n            entries = starting_entries(chart, balances)\n            ledger.post_many(entries)\n        return ledger\n\n    def post(self, debit: str, credit: str, amount: Amount, title: str = \"\"):\n        \"\"\"Post to ledger using debit and credit account names and amount.\"\"\"\n        # FIXME: title is discarded\n        return self.post_one(Entry(debit, credit, amount))\n\n    def post_one(self, entry: Entry):\n        \"\"\"Post one double entry to ledger.\"\"\"\n        return self.post_many(entries=[entry])\n\n    def post_many(self, entries: Iterable[Entry]):\n        \"\"\"Post several double entries to ledger.\"\"\"\n        failed = []\n        for entry in entries:\n            try:\n                self.data[entry.debit].debit(amount=entry.amount)\n                self.data[entry.credit].credit(amount=entry.amount)\n            except KeyError:\n                failed.append(entry)\n        if failed:\n            raise AbacusError(failed)\n        return self\n\n    @property\n    def balances(self):\n        \"\"\"Return account balances.\"\"\"\n        return AccountBalances(\n            {name: account.balance() for name, account in self.items()}\n        )\n\n    def subset(self, cls: Type[TAccount]):\n        \"\"\"Filter ledger by account type.\"\"\"\n        return self.__class__(\n            {\n                account_name: t_account\n                for account_name, t_account in self.data.items()\n                if isinstance(t_account, cls)\n            }\n        )\n\n    def condense(self):\n        \"\"\"Return a new ledger with condensed accounts that hold just one value.\n        Used to avoid copying of ledger data where only account balances are needed.\"\"\"\n        return self.__class__(\n            {name: account.condense() for name, account in self.items()}\n        )\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.balances","title":"<code>balances</code>  <code>property</code>","text":"<p>Return account balances.</p>"},{"location":"reference/#abacus.core.Ledger.condense","title":"<code>condense()</code>","text":"<p>Return a new ledger with condensed accounts that hold just one value. Used to avoid copying of ledger data where only account balances are needed.</p> Source code in <code>abacus/core.py</code> <pre><code>def condense(self):\n    \"\"\"Return a new ledger with condensed accounts that hold just one value.\n    Used to avoid copying of ledger data where only account balances are needed.\"\"\"\n    return self.__class__(\n        {name: account.condense() for name, account in self.items()}\n    )\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.new","title":"<code>new(chart, balances)</code>  <code>classmethod</code>","text":"<p>Create a new ledger from chart, possibly using starting balances.</p> Source code in <code>abacus/core.py</code> <pre><code>@classmethod\ndef new(cls, chart: Chart, balances: AccountBalances | None):\n    \"\"\"Create a new ledger from chart, possibly using starting balances.\"\"\"\n    ledger = cls({name: h.t_account() for name, h in chart.dict_items()})  # type: ignore\n    if balances:\n        entries = starting_entries(chart, balances)\n        ledger.post_many(entries)\n    return ledger\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.post","title":"<code>post(debit, credit, amount, title='')</code>","text":"<p>Post to ledger using debit and credit account names and amount.</p> Source code in <code>abacus/core.py</code> <pre><code>def post(self, debit: str, credit: str, amount: Amount, title: str = \"\"):\n    \"\"\"Post to ledger using debit and credit account names and amount.\"\"\"\n    # FIXME: title is discarded\n    return self.post_one(Entry(debit, credit, amount))\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.post_many","title":"<code>post_many(entries)</code>","text":"<p>Post several double entries to ledger.</p> Source code in <code>abacus/core.py</code> <pre><code>def post_many(self, entries: Iterable[Entry]):\n    \"\"\"Post several double entries to ledger.\"\"\"\n    failed = []\n    for entry in entries:\n        try:\n            self.data[entry.debit].debit(amount=entry.amount)\n            self.data[entry.credit].credit(amount=entry.amount)\n        except KeyError:\n            failed.append(entry)\n    if failed:\n        raise AbacusError(failed)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.post_one","title":"<code>post_one(entry)</code>","text":"<p>Post one double entry to ledger.</p> Source code in <code>abacus/core.py</code> <pre><code>def post_one(self, entry: Entry):\n    \"\"\"Post one double entry to ledger.\"\"\"\n    return self.post_many(entries=[entry])\n</code></pre>"},{"location":"reference/#abacus.core.Ledger.subset","title":"<code>subset(cls)</code>","text":"<p>Filter ledger by account type.</p> Source code in <code>abacus/core.py</code> <pre><code>def subset(self, cls: Type[TAccount]):\n    \"\"\"Filter ledger by account type.\"\"\"\n    return self.__class__(\n        {\n            account_name: t_account\n            for account_name, t_account in self.data.items()\n            if isinstance(t_account, cls)\n        }\n    )\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline","title":"<code>abacus.core.Pipeline</code>","text":"<p>A pipeline to accumulate ledger transformations.</p> Source code in <code>abacus/core.py</code> <pre><code>class Pipeline:\n    \"\"\"A pipeline to accumulate ledger transformations.\"\"\"\n\n    def __init__(self, chart: Chart, ledger: Ledger):\n        self.chart = chart\n        self.ledger = deepcopy(ledger)\n        self.closing_entries: list[Entry] = []\n\n    def append_and_post(self, entry: Entry):\n        self.ledger.post_one(entry)\n        self.closing_entries.append(entry)\n\n    def close_contra(self, t: Type[ContraAccount]):\n        \"\"\"Close contra accounts of type `t`.\"\"\"\n        for account, contra_account in contra_pairs(self.chart, t):\n            entry = self.ledger.data[contra_account].transfer_balance(\n                contra_account, account\n            )\n            self.append_and_post(entry)\n        return self\n\n    def close_to_isa(self):\n        \"\"\"Close income or expense accounts to income summary account.\"\"\"\n        for name, account in self.ledger.data.items():\n            if isinstance(account, Income) or isinstance(account, Expense):\n                entry = account.transfer_balance(\n                    name, self.chart.income_summary_account\n                )\n                self.append_and_post(entry)\n        return self\n\n    def close_isa_to_re(self):\n        \"\"\"Close income summary account to retained earnings account.\"\"\"\n        entry = Entry(\n            debit=self.chart.income_summary_account,\n            credit=self.chart.retained_earnings_account,\n            amount=self.ledger.data[self.chart.income_summary_account].balance(),\n        )\n        self.append_and_post(entry)\n        return self\n\n    def close_first(self):\n        \"\"\"Close contra income and contra expense accounts.\"\"\"\n        self.close_contra(ContraIncome)\n        self.close_contra(ContraExpense)\n        return self\n\n    def close_second(self):\n        \"\"\"Close income and expense accounts to income summary account,\n        then close income summary account to retained earnings.\"\"\"\n        self.close_to_isa()\n        self.close_isa_to_re()\n        return self\n\n    def close_last(self):\n        \"\"\"Close permanent contra accounts.\"\"\"\n        self.close_contra(ContraAsset)\n        self.close_contra(ContraLiability)\n        self.close_contra(ContraCapital)\n        return self\n\n    def close(self):\n        self.close_first()\n        self.close_second()\n        self.close_last()\n        return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_contra","title":"<code>close_contra(t)</code>","text":"<p>Close contra accounts of type <code>t</code>.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_contra(self, t: Type[ContraAccount]):\n    \"\"\"Close contra accounts of type `t`.\"\"\"\n    for account, contra_account in contra_pairs(self.chart, t):\n        entry = self.ledger.data[contra_account].transfer_balance(\n            contra_account, account\n        )\n        self.append_and_post(entry)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_first","title":"<code>close_first()</code>","text":"<p>Close contra income and contra expense accounts.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_first(self):\n    \"\"\"Close contra income and contra expense accounts.\"\"\"\n    self.close_contra(ContraIncome)\n    self.close_contra(ContraExpense)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_isa_to_re","title":"<code>close_isa_to_re()</code>","text":"<p>Close income summary account to retained earnings account.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_isa_to_re(self):\n    \"\"\"Close income summary account to retained earnings account.\"\"\"\n    entry = Entry(\n        debit=self.chart.income_summary_account,\n        credit=self.chart.retained_earnings_account,\n        amount=self.ledger.data[self.chart.income_summary_account].balance(),\n    )\n    self.append_and_post(entry)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_last","title":"<code>close_last()</code>","text":"<p>Close permanent contra accounts.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_last(self):\n    \"\"\"Close permanent contra accounts.\"\"\"\n    self.close_contra(ContraAsset)\n    self.close_contra(ContraLiability)\n    self.close_contra(ContraCapital)\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_second","title":"<code>close_second()</code>","text":"<p>Close income and expense accounts to income summary account, then close income summary account to retained earnings.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_second(self):\n    \"\"\"Close income and expense accounts to income summary account,\n    then close income summary account to retained earnings.\"\"\"\n    self.close_to_isa()\n    self.close_isa_to_re()\n    return self\n</code></pre>"},{"location":"reference/#abacus.core.Pipeline.close_to_isa","title":"<code>close_to_isa()</code>","text":"<p>Close income or expense accounts to income summary account.</p> Source code in <code>abacus/core.py</code> <pre><code>def close_to_isa(self):\n    \"\"\"Close income or expense accounts to income summary account.\"\"\"\n    for name, account in self.ledger.data.items():\n        if isinstance(account, Income) or isinstance(account, Expense):\n            entry = account.transfer_balance(\n                name, self.chart.income_summary_account\n            )\n            self.append_and_post(entry)\n    return self\n</code></pre>"},{"location":"reference/#reports","title":"Reports","text":""},{"location":"reference/#abacus.core.BalanceSheet","title":"<code>abacus.core.BalanceSheet</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Statement</code></p> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass BalanceSheet(Statement):\n    assets: AccountBalances\n    capital: AccountBalances\n    liabilities: AccountBalances\n\n    @property\n    def viewer(self):\n        from abacus.viewers import BalanceSheetViewer\n\n        return BalanceSheetViewer(self)\n\n    @classmethod\n    def new(cls, ledger: Ledger):\n        return cls(\n            assets=ledger.subset(Asset).balances,\n            capital=ledger.subset(Capital).balances,\n            liabilities=ledger.subset(Liability).balances,\n        )\n</code></pre>"},{"location":"reference/#abacus.core.IncomeStatement","title":"<code>abacus.core.IncomeStatement</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Statement</code></p> Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass IncomeStatement(Statement):\n    income: AccountBalances\n    expenses: AccountBalances\n    default_header: ClassVar[str] = \"Income statement\"\n\n    @property\n    def viewer(self):\n        from abacus.viewers import IncomeStatementViewer\n\n        return IncomeStatementViewer(self)\n\n    @classmethod\n    def new(cls, ledger: Ledger):\n        return cls(\n            income=ledger.subset(Income).balances,\n            expenses=ledger.subset(Expense).balances,\n        )\n\n    def current_profit(self):\n        return sum(self.income.values()) - sum(self.expenses.values())\n</code></pre>"},{"location":"reference/#abacus.core.TrialBalance","title":"<code>abacus.core.TrialBalance</code>","text":"<p>               Bases: <code>UserDict[str, tuple[Amount, Amount]]</code>, <code>Statement</code></p> <p>Trial balance is a dictionary of account names and their debit-side and credit-side balances.</p> Source code in <code>abacus/core.py</code> <pre><code>class TrialBalance(UserDict[str, tuple[Amount, Amount]], Statement):\n    \"\"\"Trial balance is a dictionary of account names and\n    their debit-side and credit-side balances.\"\"\"\n\n    @classmethod\n    def new(cls, ledger: Ledger):\n        _ledger = ledger.condense()\n        tb = cls()\n        for name, balance in _ledger.subset(DebitAccount).balances.items():\n            tb[name] = (balance, 0)\n        for name, balance in _ledger.subset(CreditAccount).balances.items():\n            tb[name] = (0, balance)\n        return cls(tb)\n\n    @property\n    def viewer(self):\n        from abacus.viewers import TrialBalanceViewer\n\n        return TrialBalanceViewer(self.data)\n</code></pre>"},{"location":"reference/#abacus.core.AccountBalances","title":"<code>abacus.core.AccountBalances</code>","text":"<p>               Bases: <code>UserDict[str, Amount]</code></p> Source code in <code>abacus/core.py</code> <pre><code>class AccountBalances(UserDict[str, Amount]):\n    def nonzero(self):\n        return self.__class__(\n            {name: balance for name, balance in self.items() if balance}\n        )\n\n    def total(self):\n        return sum(self.values())\n\n    def json(self):\n        return json.dumps(self.data, indent=4, ensure_ascii=False)\n\n    def save(self, path: Path | str):\n        Path(path).write_text(self.json(), encoding=\"utf-8\")\n\n    @classmethod\n    def load(cls, path: Path | str):\n        return cls(json.loads(Path(path).read_text(encoding=\"utf-8\")))\n</code></pre>"},{"location":"reference/#abacus.Report","title":"<code>abacus.Report</code>  <code>dataclass</code>","text":"Source code in <code>abacus/core.py</code> <pre><code>@dataclass\nclass Report:\n    chart: Chart\n    ledger: Ledger\n    rename_dict: dict[str, str] = field(default_factory=dict)\n\n    # FIXME: may condense chart after init\n\n    def rename(self, key, value):\n        self.rename_dict[key] = value\n        return self\n\n    @property\n    def pipeline(self):\n        return Pipeline(self.chart, self.ledger)\n\n    @property\n    def balance_sheet(self):\n        p = self.pipeline.close_first().close_second().close_last()\n        return BalanceSheet.new(p.ledger)\n\n    @property\n    def balance_sheet_before_closing(self):\n        return BalanceSheet.new(self.ledger)\n\n    @property\n    def income_statement(self):\n        p = self.pipeline.close_first()\n        return IncomeStatement.new(p.ledger)\n\n    @property\n    def trial_balance(self):\n        return TrialBalance.new(self.ledger)\n\n    @property\n    def account_balances(self):\n        return self.ledger.balances\n\n    def print_all(self):\n        from abacus.viewers import print_viewers\n\n        tv = self.trial_balance.viewer\n        bv = self.balance_sheet.viewer\n        iv = self.income_statement.viewer\n        print_viewers(self.rename_dict, tv, bv, iv)\n</code></pre>"},{"location":"textbook/","title":"Textbook examples","text":""},{"location":"textbook/#joan-robinson-law-office","title":"Joan Robinson law office","text":"<p>From \"Accounting Principles\" by Weygandt, Kimmel and Kieso (ed 12, p. 31).</p> <p>Joan Robinson opens her own law office on July 1, 2017. During the first month of operations, the following transactions occurred.</p> <ol> <li>Joan invested $11,000 in cash in the law practice.</li> <li>Paid $800 for July rent on offi ce space.</li> <li>Purchased equipment on account $3,000.</li> <li>Performed legal services to clients for cash $1,500.</li> <li>Borrowed $700 cash from a bank on a note payable.</li> <li>Performed legal services for client on account $2,000.</li> <li>Paid monthly expenses: salaries and wages $500, utilities $300, and advertising $100.</li> <li>Joan withdrew $1,000 cash for personal use.</li> </ol> <p>Solution: click here.</p>"},{"location":"textbook/#yazici-advertising","title":"Yazici Advertising","text":"<p>From \"Intermediate Accounting. IFRS Edition\" by Weygandt, Kimmel and Warfiled. Illustration 3-10 to 3-20.</p> <p>Solution: click here.</p>"},{"location":"textbook/#accountingcoachcom","title":"AccountingCoach.com","text":"<p>Direct Delivery sample transactions 1-6 from accountingcoach.com.</p> Command lineResult <pre><code>bx unlink --yes\nbx init\nbx post --entry asset:cash capital:common_stock 20000 --title \"1. Owner's investment\"\nbx post --entry asset:vehicles cash             14000 --title \"2. Purchased vehicle\"\nbx post --entry asset:prepaid_insurance cash     1200 --title \"3. Bought insurance\"\nbx post --entry cash income:services               10 --title \"4. Accepted cash for provided services\"\nbx post --entry asset:ar services                 250 --title \"5. Provided services on account\"\nbx post --entry expense:agency liability:ap        80 --title \"6. Purchased services on account\"\nbx close\nbx chart name ar \"Accounts receivable\"\nbx chart name ap \"Accounts payable\"\nbx chart name agency \"Temporary help agency\"\nbx report --all\n</code></pre> <pre><code>                    Balance sheet\nAssets                 20260  Capital              20180\n  Cash                  4810    Common stock       20000\n  Vehicles             14000    Retained earnings    180\n  Prepaid insurance     1200  Liabilities             80\n  Accounts receivable    250    Accounts payable      80\nTotal                  20260  Total                20260\n\n                    Income Statement\nIncome                                               260\n  Services                                           260\nExpenses                                              80\n  Temporary help agency                               80\nCurrent profit                                       180\n</code></pre>"},{"location":"about/motivation/","title":"Motivation","text":""},{"location":"about/motivation/#original-intent","title":"Original intent","text":"<p><code>abacus</code> started as a project to demonstrate principles of double-entry accounting through Python code, in spirit of build-your-own-x.</p>"},{"location":"about/motivation/#teaching","title":"Teaching","text":"<p>You can use <code>abacus</code> to teach basics of accounting and accounting information systems (AIS), or as a project in your Python class.</p>"},{"location":"about/motivation/#other-uses","title":"Other uses","text":"<ul> <li>Use <code>abacus</code> as a software component with other open source tools such as <code>medici</code> ledger.</li> <li>Convert reports between charts of accounts, for example local accounting standards to IFRS.</li> <li>Process business events in scenario simulations and make financial reports.</li> <li>Generate prompts for a large language model in accounting (RAG).</li> <li>A vendor-agnostic DSL (domain-specific language) for accounting.</li> </ul>"},{"location":"about/quotes/","title":"Quotes","text":"<p>People seem to like the idea of a small library that can demonstrate how accounting system works. Below are some quotes from reddit discussions and other feedback that I found inspiring.</p> <p>I think it's a great idea to mock-up a mini GL ERP to really get a foundational understanding of how the accounting in ERP works!</p> <p>I teach accounting information systems... I'd be tempted to use abacus as a way of simply showing the structure of a simple AIS.</p> <p>Hey, what a cool job, thanks much. Do you plan to make a possibility for RAS accounting?</p>"},{"location":"about/similar/","title":"Alternatives","text":""},{"location":"about/similar/#javascript","title":"JavaScript","text":"<ul> <li>medici (JavaScript) is a ledger store optimized for high loads (does not enforce any chart of accounts conventions).</li> </ul>"},{"location":"about/similar/#python","title":"Python","text":"<ul> <li>pyluca is actively developed and has practical use in mind, coined a term 'headless ledger' (different interface and data structures than <code>abacus</code>).</li> <li>ledger.py started about 10 years ago with Python 2, was once a hledger competitor, has good documentation, but last commit in 2018.</li> </ul>"},{"location":"about/similar/#plain-text-accounting","title":"Plain text accounting","text":"<ul> <li><code>Ledger</code>, <code>hledger</code> and <code>beancount</code> are leaders in plain text accounting</li> <li>See also gnucash</li> </ul>"},{"location":"about/similar/#more-information","title":"More information","text":"<ul> <li>Open source ERPs (Odoo, ERPNext) all have accounting functionality.</li> <li><code>double-entry-accounting</code> tag on Github   is an extra clue for open source accounting information.</li> </ul>"},{"location":"accounting/chart_of_accounts/","title":"Chart of accounts","text":"<p>Chart of accounts is a list of accounts to be used by a company. Chart of accounts may be defined by the government (as in Europe) or can be specified by the company itself according to guidelines (as in the US). Fiscal rules and reporting requirements also affect composition of a chart of accounts.</p> <p>Charts of accounts are rarely published in an open, structured and machine-readable format. They usually exist as a published legal document, a PDF file, sometimes an Excel file, or may be deeply embedded in accounting software, either open source (like Odoo) or proprietary (Oracle, SAP, NetSuite, Xero or QuickBooks). Odoo in specific has a list of country localisations.</p> <p>A few country charts are listed below:</p> <ul> <li>IFRS reference chart (similar to this)</li> <li>BAS (Sweden)</li> <li>SKR03 and SKR04 (Germany)</li> <li>PCMN (Belgium)</li> <li>RAS (Russia)</li> </ul> <p>There are also textbook charts and sample charts like DunderMifflin Paper Company fun chart.</p> <p><code>abacus</code> allows to create and maintain charts of accounts as JSON files. After a chart is specified, one can proceed to open ledger, posting entries and create financial reports.</p>"},{"location":"accounting/introduction/","title":"Introduction to accounting","text":"<p>The <code>abacus</code> user is expected to have some task in mind that is solvable using Python code or scripts. But if you are totally new to the accounting area subject? Here is an introductory guide accounting, broken into several steps.</p>"},{"location":"accounting/introduction/#limited-liability-concept","title":"Limited liability concept","text":"<ol> <li> <p>A firm is an entity that is legally separate from shareholders. The shareholders risk    loosing their investment into the firm if things go bad, but are not liable for any losses beyond that amount that may arise from firm operations.</p> </li> <li> <p>The shareholders, creditors, trading partners and other parties want to know if    the firm is profitable and if it can meet obligations to repay its debt.    To satisfy these interesets the firm discloses financial information.</p> </li> </ol>"},{"location":"accounting/introduction/#balance-sheet-and-income-statement-view-of-the-firm","title":"Balance sheet and income statement view of the firm","text":"<ol> <li> <p>A firm keeps records of the resources that the firm owns (assets) and sources of funds \u2014    shareholder equity (or capital) and liabilities (debt). This is a firm financial position,    or balance sheet view of the firm.</p> </li> <li> <p>A firm also keeps records of income and expenses that indicate does the firm make a profit or make a loss. This is income statement view of the firm.</p> </li> <li> <p>Balance sheet and income statement are derived from the same data linked together in an    accounting equation as explained below.</p> </li> </ol>"},{"location":"accounting/introduction/#assets-capital-and-liabilities","title":"Assets, capital and liabilities","text":"<ol> <li> <p>Capital and liabilities indicate who has claims on the firm. A claim shows where the money came    from and where the money should be distributed if the firm is liquidated. Claims also have order of precedence in a firm liquidation.</p> </li> <li> <p>Capital, or equity, are funds provided by firm owners. The shareholders expect the firm will make    a profit by allocating these funds at the best of their interest and distribute all or part of this profit back to shareholders as dividend. The profit not distributed remains with the firm as 'retained earnings'.</p> </li> <li> <p>Liabilities are financial obligations of the firm. These are the records of what the firm owes    to other parties. When a firm takes a loan for a bank it is reflected as a liability. Also when some payment is due but not yet fulfilled this amount is also reflected as a firm's liability (for example, interest payment on a loan that is die. but was not mede yet). Liabilities are classified based on duration as current liabilities (due within a year) and long term liabilities (due at time beyond one year).</p> </li> <li> <p>Assets is everything that is owned by the firm itself and what can be converted into cash. Assets    are classified into fixed, or non-current, assets (like property, plant, and equipment) and current assets (like cash and inventory).</p> </li> </ol>"},{"location":"accounting/introduction/#assets-capital-liabilities","title":"<code>Assets = Capital + Liabilities</code>","text":"<ol> <li> <p>An accounting identity <code>Assets = Equity + Liabilities</code> is a statement that says the sources of funds are equal to the uses of funds. This is a published form of balance sheet statement at the end of an accounting period (a quarter or a year).</p> </li> <li> <p>Profit of the firm is revenue (or sales, or income) less expenses associated with this revenue: <code>Profit = Income - Expenses</code>. The report containing this data is income statement.</p> </li> <li> <p>In accounting equation profit is recorded on the right side where capital and liabilities side.    Why so? Profit is an increment of capital invested into the firm, so it appears next to equity. When no dividends are paid, all of the current profit will add up to retained earnings, which is a component of equity. When the firm incurs a loss, this loss will diminish the firm capital.</p> </li> <li> <p>In <code>Assets = Equity + Liabilities</code> representation the current period profit was already    distributed to dividend and retained earnings and does not appear on a balance sheet as separate entity.</p> </li> </ol>"},{"location":"accounting/introduction/#extended-accounting-identity","title":"Extended accounting identity","text":"<p><code>Assets + Expenses = Equity + Liabilities + Income</code></p> <ol> <li> <p>Within a reporting period, the accounting equation can be written as    <code>Assets = Equity + Profit + Liabilities</code>, where <code>Profit</code> is the current period profit before dividend. Substituting <code>Profit = Income - Expenses</code> into the equation and rearranging we get the extended form of the accounting identity above.</p> </li> <li> <p>The extended accounting equation always holds true. Whenever a new accounting transaction is    recorded you are just changing some variables in this equation. In a double entry, you change two variables, in a compound entry you change several variables.</p> </li> <li> <p>If you try to record just one change, for example, just receipt of cash from a customer as    increase in <code>Assets</code>, the equation will break. For cash receipt from customer, you should record an increase in <code>Income</code> and an equal increase in <code>Assets</code>.</p> </li> </ol>"},{"location":"accounting/introduction/#recording-transactions","title":"Recording transactions","text":"<ol> <li> <p>You may take a mind experiment and thinking of various business transactions and provide    examples of four types of double entries:</p> </li> <li> <p>two variables of the right side are changed;</p> </li> <li>two variables of the left side are changed;</li> <li>both left side and right side are increased;</li> <li> <p>both right side and left side are decreased.</p> </li> <li> <p>You do not specifically need debits and credits to manipulate the extended accounting equation.    The debits and credits are just a convenient notation system that helps denote which accounts are increased and which decreased.</p> </li> </ol>"},{"location":"accounting/introduction/#is-real-accounting-system-different-from-above","title":"Is real accounting system different from above?","text":"<ol> <li> <p>A \"real\" accounting system would have more components, like keeping track    of original paperwork or electronic documents that validate the information    that enters the system.</p> </li> <li> <p>On account system side there may be \"contra\" accounts added that keep track    of changes in original accounts, for example \"depreciation\" contra account    for \"property, plant, equipment\" or \"refunds\" contra account for \"sales\".</p> </li> <li> <p>On recognition, valuation and reporting sides important aspects are:</p> </li> <li> <p>accrual basis and recording of receivables and payables;</p> </li> <li>fair value, depreciation and amortization concepts, valuation changes;</li> <li>deferred or accrued income and expenses and adjustment entries.</li> </ol>"}]}