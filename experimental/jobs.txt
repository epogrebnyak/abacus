if __name__ == "__main__":

    @dataclass
    class Job:
        start_ledger: Ledger
        entries: List[Entry]

        def extend(self, entries) -> "Job":
            return Job(self.start_ledger, self.entries + entries)

        def run(self) -> Ledger:
            # FIXME: condense ledger to balances
            res = self.start_ledger.deep_copy()
            post_entries(res, self.entries)
            return res

    @dataclass
    class JobMaker:
        chart: Chart
        entries: "Entries"

        @property
        def ledger0(self):
            """Empty ledger based on *self.chart*."""
            return make_ledger(self.chart)

        def after_start(self):
            return Job(self.ledger0, self.entries.start)

        def after_business(self):
            return Job(self.ledger0, self.entries.start + self.entries.business)

        def after_adjustment(self):
            return Job(
                self.ledger0,
                self.entries.start + self.entries.business + self.entries.adjustment,
            )

        def after_netting_expense_and_income_contra_accounts(self):
            return self.after_adjustment().extend(
                self.entries.closing_contra_income + self.entries.closing_contra_expense
            )

        def before_post_close(self):
            return self.after_netting_expense_and_income_contra_accounts().extend(
                self.entries.closing_income_and_expense + self.entries.closing_isa
            )

        def after_post_close(self):
            """This state of ledger is used to produce balance_sheet."""
            return self.before_post_close().extend(self.entries.post_close)

        def after_netting_expense_and_income_contra_accounts_with_post_close(self):
            """This state of ledger is used to produce income statement."""
            x = self.after_netting_expense_and_income_contra_accounts()
            return x.extend(self.entries.post_close)

    @dataclass
    class UserEntries:
        start: List[Entry]
        business: List[Entry]
        adjustment: List[Entry]
        post_close: List[Entry]

    from typing import Tuple

    def for_reports(chart, entries) -> Tuple[Job, Job]:
        ledger = (
            JobMaker(chart, entries).after_adjustment().run().condense()
        )  # probably takes long
        for_income_statement = Job(
            ledger, entries.closing_contra_income + entries.closing_contra_expense
        )
        for_balance_sheet = for_income_statement.extend(
            entries.closing_income_and_expense + entries.closing_isa
        )
        return for_income_statement, for_balance_sheet

    # Chart -> UserEntries -> ClosingEntries -> (IncomeStatement, BalanceSheet) -> (str, str)
